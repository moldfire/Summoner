package com.moldfire.mfsummoner.tileentity;

import java.util.Arrays;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.IInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.ChatComponentText;
import net.minecraft.util.ChatComponentTranslation;
import net.minecraft.util.IChatComponent;

public class TileEntityStabiliser extends TileEntity implements IInventory
{
	public static final String name = "tileEntityStabiliser";
	private ItemStack itemStack[] = new ItemStack[1];

	@Override
	public String getName()
	{
		return "container."+name+".name";
	}

	@Override
	public boolean hasCustomName() 
	{
		return false;
	}

	@Override
	public IChatComponent getDisplayName() 
	{
		return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatComponentTranslation(this.getName());
	}
	
	@Override
	public void writeToNBT(NBTTagCompound compound)
	{
		super.writeToNBT(compound);
		
		NBTTagList slots = new NBTTagList();
		for(int i = 0; i < this.itemStack.length; ++i)
		{
			if(this.itemStack[i] != null)
			{
				NBTTagCompound slot = new NBTTagCompound();
				slot.setByte("Slot", (byte)i);
				this.itemStack[i].writeToNBT(slot);
				slots.appendTag(slot);
			}
		}
		compound.setTag("Items", slots);
	}
	
	@Override
	public void readFromNBT(NBTTagCompound compound)
	{
		super.readFromNBT(compound);
		final byte NBT_TYPE_COMPOUND = 10;
		NBTTagList slots = compound.getTagList("Items", NBT_TYPE_COMPOUND);
		
		Arrays.fill(itemStack, null);
		for(int i = 0; i < slots.tagCount(); ++i)
		{
			NBTTagCompound slot = slots.getCompoundTagAt(i);
			int slotIndex = slot.getByte("Slot") & 255;
			
			if(slotIndex >=0 && slotIndex <= this.itemStack.length)
			{
				this.itemStack[slotIndex] = ItemStack.loadItemStackFromNBT(slot);
			}
		}
	}
	
	@Override
	public int getSizeInventory() 
	{
		return itemStack.length;
	}

	@Override
	public ItemStack getStackInSlot(int index) 
	{
		return itemStack[index];
	}

	@Override
	public ItemStack decrStackSize(int index, int count) 
	{
		ItemStack stackInSlot = getStackInSlot(index);
		if(stackInSlot == null)
		{
			return null;
		}
		
		ItemStack stackRemoved;
		if(stackInSlot.stackSize <= count)
		{
			stackRemoved = stackInSlot;
			setInventorySlotContents(index, null);
		}
		else
		{
			stackRemoved = stackInSlot.splitStack(count);
			if(stackInSlot.stackSize == 0)
			{
				setInventorySlotContents(index, null);
			}
		}
		markDirty();
		return stackRemoved;
	}

	@Override
	public ItemStack getStackInSlotOnClosing(int index) 
	{
		//Not Used
		return null; 
	}

	@Override
	public void setInventorySlotContents(int index, ItemStack stack) 
	{
		itemStack[index] = stack;
		if(stack != null && stack.stackSize > getInventoryStackLimit())
		{
			stack.stackSize = getInventoryStackLimit();
		}
		markDirty();
	}

	@Override
	public int getInventoryStackLimit() 
	{
		return 64;
	}

	@Override
	public boolean isUseableByPlayer(EntityPlayer player) 
	{
		if(this.worldObj.getTileEntity(this.pos) != this)
		{
			return false;
		}
		
		final double X_OFFSET = 0.5;
		final double Y_OFFSET = 0.5;
		final double Z_OFFSET = 0.5;
		final double MAXIMUM_DISTANCE_SQ = 8.0 * 8.0;
		return player.getDistanceSq(pos.getX() + X_OFFSET, pos.getY()+Y_OFFSET, pos.getZ() + Z_OFFSET) < MAXIMUM_DISTANCE_SQ;
	}

	@Override
	public void openInventory(EntityPlayer player) 
	{ //Not Used
	}

	@Override
	public void closeInventory(EntityPlayer player)
	{ //Not Used
	}

	@Override
	public boolean isItemValidForSlot(int index, ItemStack stack)
	{
		//No hoppers allowed
		return false;
	}

	@Override
	public int getField(int id) 
	{
		//Not Used
		return 0; 
	}

	@Override
	public void setField(int id, int value) 
	{
	//Not Used
	}

	@Override
	public int getFieldCount() 
	{
		//Not Used
		return 0; 
	}

	@Override
	public void clear() 
	{
		Arrays.fill(itemStack, null);
	}
}
