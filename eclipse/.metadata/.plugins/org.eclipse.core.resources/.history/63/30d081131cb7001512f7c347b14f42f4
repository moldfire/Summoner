package com.moldfire.mfsummoner.blocks;

import java.util.Random;

import org.apache.logging.log4j.Level;

import com.moldfire.mfsummoner.init.ModBlocks;
import com.moldfire.mfsummoner.reference.Reference;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.block.properties.IProperty;
import net.minecraft.block.properties.PropertyEnum;
import net.minecraft.block.state.BlockState;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.item.Item;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumParticleTypes;
import net.minecraft.util.IStringSerializable;
import net.minecraft.world.World;
import net.minecraftforge.fml.common.FMLLog;


public class BlockAlterStabiliser extends BlockMFS//BlockContainerMFS implements ITileEntityProvider
{
	public static final PropertyEnum SHAPE = PropertyEnum.create("shape", BlockAlterStabiliser.EnumShape.class);
	
	public BlockAlterStabiliser(String name, Material material, float hardness)
	{
		super(name, material, hardness);
		setTickRandomly(false);
		this.setStepSound(soundTypeStone);
		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F, 1.0F);
		System.out.println("Alter Stabiliser Constructer");
	}
	
	@Override
	public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
	{
		System.out.println("Update Tick");
	}
	
	@Override
	public void onBlockDestroyedByPlayer(World worldIn, BlockPos pos, IBlockState state) 
	{
		checkStructure(worldIn, pos, state);
		System.out.println("Block Destroyed");
	}
	
	@Override
	public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
    {
        return this.getStateFromMeta(meta);
    }
	
	@Override
	public int quantityDropped(Random random)
    {
        return 0;
    }

    @Override
    public Item getItemDropped(IBlockState state, Random rand, int fortune)
    {
        return null;
    }
	
	@Override
	public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ)
    {
        return false;
    }
	
	@Override
	public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
	{
		//Does not drop anything when broken
	}
	
	@Override
	public void randomDisplayTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
    {
		for (int i = 0; i < 10; ++i)
        {
            double d0 = (double)((float)pos.getX() + rand.nextFloat());
            double d1 = (double)((float)pos.getY() + rand.nextFloat());
            double d2 = (double)((float)pos.getZ() + rand.nextFloat());
            double d3 = ((double)rand.nextFloat() - 0.5D) * 0.5D;
            double d4 = ((double)rand.nextFloat() - 0.5D) * 0.5D;
            double d5 = ((double)rand.nextFloat() - 0.5D) * 0.5D;
            
           if(this.getMetaFromState(state) == 1)
            {
            	worldIn.spawnParticle(EnumParticleTypes.PORTAL, d0, d1, d2, d3, d4, d5, new int[0]);
            	worldIn.spawnParticle(EnumParticleTypes.ENCHANTMENT_TABLE, d0, d1, d2, d3, d4, d5, new int[0]);
            	worldIn.spawnParticle(EnumParticleTypes.PORTAL, d0, d1+1, d2, d3, d4, d5, new int[0]);
            	worldIn.spawnParticle(EnumParticleTypes.ENCHANTMENT_TABLE, d0, d1+1, d2, d3, d4, d5, new int[0]);
            }
         }
		
		for (int i = 0; i < 25; ++i)
        {	
            double d0 = (double)((float)pos.getX() + rand.nextFloat());
            double d1 = (double)((float)pos.getY() + rand.nextFloat());
            double d2 = (double)((float)pos.getZ() + rand.nextFloat());
            double d3 = ((double)rand.nextFloat() - 0.5D) * 0.5D;
            double d4 = ((double)rand.nextFloat() - 0.5D) * 0.5D;
            double d5 = ((double)rand.nextFloat() - 0.5D) * 0.5D;
            
            if(this.getMetaFromState(state) == 0)
            {
            	worldIn.spawnParticle(EnumParticleTypes.DRIP_WATER, d0, d1+1, d2, d3, d4, d5, new int[0]);
            }
        }
    }
	
	public boolean isOpaqueCube()
    {
        return false;
    }
	
	public boolean isFullCube()
    {
        return false;
    }
	
	private void checkStructure(World worldIn, BlockPos pos, IBlockState state)
	{
		BlockPos currentPos = pos;
		Block block = null;
		
		if(this.getMetaFromState(state) == 1)
		{
			currentPos = new BlockPos(pos.getX()-3, pos.getY(), pos.getZ()-3);
			System.out.println("Central Alter");
		}
		else
		{
			if(worldIn.getBlockState(new BlockPos(currentPos.add(3, 0, 0))).getBlock() == ModBlocks.alterStabiliser)
			{
				currentPos = new BlockPos(pos.getX(), pos.getY(), pos.getZ()-3);
				System.out.println("x-3 Alter");
			}
			if(worldIn.getBlockState(new BlockPos(currentPos.add(-3, 0, 0))).getBlock() == ModBlocks.alterStabiliser)
			{
				currentPos = new BlockPos(pos.getX()-6, pos.getY(), pos.getZ()-3);
				System.out.println("x-3 Alter");
			}
			if(worldIn.getBlockState(new BlockPos(currentPos.add(0, 0, 3))).getBlock() == ModBlocks.alterStabiliser)
			{
				currentPos = new BlockPos(pos.getX()-3, pos.getY(), pos.getZ());
				System.out.println("x-3 Alter");
			}
			if(worldIn.getBlockState(new BlockPos(currentPos.add(0, 0, -3))).getBlock() == ModBlocks.alterStabiliser)
			{
				currentPos = new BlockPos(pos.getX()-3, pos.getY(), pos.getZ()-6);
				System.out.println("x-3 Alter");
			}
		}
		
		for(int x = 0; x <= 6; x++)
		{
			for(int z = 0; z <= 6; z++)
			{
				BlockPos currentPos2 = new BlockPos(currentPos.getX()+x, currentPos.getY(), currentPos.getZ()+z);
				IBlockState iBlockState1 = worldIn.getBlockState(currentPos2);
				
				block = iBlockState1.getBlock();
								
				worldIn.spawnParticle(EnumParticleTypes.EXPLOSION_LARGE, currentPos2.getX(), currentPos2.getY(), currentPos2.getZ(), currentPos2.getX(), currentPos2.getY(), currentPos2.getZ(), new int[0]);
				
				if(z == 0 && x == 3 || z == 3 && x == 0 || z == 3 && x == 6 || z == 6 && x == 3 || z == 3 && x == 3)
				{
            		worldIn.destroyBlock(currentPos2, false);
	            	worldIn.markBlockForUpdate(currentPos2);
				}
				
				if(z >= 1 && z <=5 && x >= 1 && x <=5)
				{
					if(z == 1 || z == 5)
					{
						if(x == 1 || x == 5)
						{
							continue;
						}
					}
					
					worldIn.destroyBlock(currentPos2, false);
	            	worldIn.markBlockForUpdate(currentPos2);
				}
				
				worldIn.spawnParticle(EnumParticleTypes.EXPLOSION_LARGE, d0, d1, d2, d3, d4, d5, new int[0]);
			}
		}
	}
	
	@Override
	protected BlockState createBlockState()
    {
        return new BlockState(this, new IProperty[] {SHAPE});
    }
	
	@Override
	public IBlockState getStateFromMeta(int meta)
	{
		return getDefaultState().withProperty(SHAPE, meta == 0 ? EnumShape.OUTER : EnumShape.INNER);
	}
	
	@Override
	public int getMetaFromState(IBlockState state)
	{
		EnumShape shape = (EnumShape)state.getValue(SHAPE);
		return shape.getID();
	}
	
	public static enum EnumShape implements IStringSerializable
	{
		OUTER(0, "outer"),
		INNER(1, "inner");
		private final int ID;
		private final String name;
		
		private EnumShape(int ID, String name)
		{
			this.ID = ID;
			this.name = name;
		}
		
		@Override
		public String toString()
		{
			return this.getName();
		}
		
		@Override
		public String getName() 
		{
			return this.name;
		}
		
		public int getID()
		{
			return this.ID;
		}
	
	}
}
